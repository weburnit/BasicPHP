<?php
/**
 * Created by PhpStorm.
 * User: paulnguyen
 * Date: 12/2/16
 * Time: 9:51 PM
 */

namespace Tests\Paul\Transport\Coordinator;

use Paul\Transport\Coordinator\Agent;
use Paul\Transport\Coordinator\BoardingCard;
use Paul\Transport\Transportation\Exception\NoTransportationException;
use Paul\Transport\Transportation\Location;
use Paul\Transport\Transportation\StationInterface;
use Paul\Transport\Transportation\Vehicle\Bus;
use Paul\Transport\Transportation\Vehicle\Plane;
use Paul\Transport\Transportation\Vehicle\Train;

class AgentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Agent
     */
    private $agent;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->agent = new Agent();
    }

    public function testAddContracts()
    {
        $station = $this->createMock(StationInterface::class);
        $station->method('getName')->willReturn('DubaiAirport');

        $this->agent->contractWith($station);

        static::assertEquals(true, $this->agent->isContractWith($station));
    }

    /**
     * 1. Take train 78A from Madrid to Barcelona. Sit in seat 45B.
     * 2. Take the airport bus from Barcelona to Gerona Airport. No seat assignment.
     * 3. From Gerona Airport, take flight SK455 to Stockholm. Gate 45B, seat 3A. Baggage drop at ticket counter 344.
     * 4. From Stockholm, take flight SK22 to New York JFK. Gate 22, seat 7B.
     * Baggage will we automatically transferred from your last leg.
     */
    public function testResolveBoardingCards()
    {
        $madrid = new Location('Madrid', 12, 13);
        $train  = new Train('train', '78A', 300);
        $train->setCurrentLocation($madrid);
        $bacelona      = new Location('Barcelona', 12, 13);
        $trainBoarding = new BoardingCard($train, $bacelona, 'Sit in seat 45B');

        $airportBus = new Bus('Airport bus', '3254-A', 50);
        $airportBus->setCurrentLocation($bacelona);
        $geronaAirport = new Location('Gerona Airport', 15, 16);
        $busTicket     = new BoardingCard($airportBus, $geronaAirport, 'No seat assignment');

        $airplane = new Plane('Plane', 'SK455', 250);
        $airplane->setCurrentLocation($geronaAirport);
        $stockholm = new Location('Stockholm', 17, 18);
        $airTicket = new BoardingCard($airplane, $stockholm, 'Gate 45B, seat 3A. Baggage drop at ticket counter 344');

        $newYorkFlight = new Plane('Plane', 'SK22', 250);
        $newYorkFlight->setCurrentLocation($stockholm);
        $newYork         = new Location('New York JFK', 19, 20);
        $ticketToNewYork = new BoardingCard(
            $newYorkFlight,
            $newYork,
            'Gate 22, seat 7B. Baggage will we automatically transferred from your last leg'
        );

        $this->agent->addCard($ticketToNewYork)->addCard($airTicket)
            ->addCard($busTicket)->addCard($trainBoarding);

        $boardingCards = $this->agent->resolve();

        static::assertEquals(
            'Take train 78A from Madrid to Barcelona. Sit in seat 45B',
            $boardingCards[0]->getDescription()
        );
        static::assertEquals(
            'Take the Airport bus 3254-A from Barcelona to Gerona Airport. No seat assignment',
            $boardingCards[1]->getDescription()
        );
        static::assertEquals(
            'From Gerona Airport, take Plane SK455 to Stockholm. Gate 45B, seat 3A. Baggage drop at ticket counter 344',
            $boardingCards[2]->getDescription()
        );
        static::assertEquals(
            'From Stockholm, take Plane SK22 to New York JFK. Gate 22, seat 7B. Baggage will we automatically transferred from your last leg',
            $boardingCards[3]->getDescription()
        );

        static::assertEquals(
            '1. Take train 78A from Madrid to Barcelona. Sit in seat 45B
2. Take the Airport bus 3254-A from Barcelona to Gerona Airport. No seat assignment
3. From Gerona Airport, take Plane SK455 to Stockholm. Gate 45B, seat 3A. Baggage drop at ticket counter 344
4. From Stockholm, take Plane SK22 to New York JFK. Gate 22, seat 7B. Baggage will we automatically transferred from your last leg
5. You have arrived at your final destination',
            $this->agent->printItinerary()
        );
    }

    public function testSignContract()
    {
        $station = $this->createMock(StationInterface::class);
        $station->method('getName')->willReturn('Changi Airport');

        $this->agent->contractWith($station);

        static::assertTrue($this->agent->isContractWith($station), 'Agent must have contract with existing company');
    }

    public function testAgentIsAbleToRequestTicketThroughContractedCompany()
    {
        $location = $this->createMock(Location::class);
        $ticket   = $this->createMock(BoardingCard::class);
        $station  = $this->createMock(StationInterface::class);
        $station->method('getName')->willReturn('Changi Airport');
        $station->expects(static::once())->method('receiveTicketRequest')->with($location)->willReturn(
            $ticket
        );

        $this->agent->contractWith($station);
        static::assertEquals($ticket, $this->agent->requestTicket($location), 'Must be able to return ticket');
    }

    /**
     * @expectedException \Paul\Transport\Transportation\Exception\NoTicketException
     * @expectedExceptionMessage No available ticket for this company:Changi Airport
     */
    public function testAgentIsNotAbleToRequestTicketThroughContractedCompany()
    {
        $location = $this->createMock(Location::class);
        $station  = $this->createMock(StationInterface::class);
        $station->method('getName')->willReturn('Changi Airport');
        $station->expects(static::once())->method('receiveTicketRequest')->with($location)->willThrowException(
            $this->createMock(NoTransportationException::class)
        );

        $this->agent->contractWith($station);
        $this->agent->requestTicket($location);
    }

    /**
     * @expectedException \Paul\Transport\Transportation\Exception\NoTransportationException
     * @expectedExceptionMessage There no contracts in this agent
     */
    public function testAgentHasNoContractedCompany()
    {
        $location = $this->createMock(Location::class);
        $station  = $this->createMock(StationInterface::class);
        $station->method('getName')->willReturn('Changi Airport');
        $station->expects(static::never())->method('receiveTicketRequest');

        $this->agent->requestTicket($location);
    }
}